{"version":3,"file":"build.js","sources":["../../src/plugin/build.ts"],"sourcesContent":["import chalk from 'chalk';\nimport defer, { type DeferredPromise } from 'p-defer';\nimport {\n  type ConfigEnv,\n  createLogger,\n  type InlineConfig,\n  loadConfigFromFile,\n  mergeConfig,\n  type Plugin,\n  type PluginOption,\n  preview,\n  type PreviewServer,\n  type UserConfig,\n} from 'vite';\nimport { type WebSocket } from 'ws';\n\nimport { createDebugger } from '../util/create-debugger.js';\nimport pluginServe from './serve.js';\n\nexport type LivePreviewConfig =\n  | Omit<UserConfig, 'plugins'>\n  | null\n  | ((config: UserConfig, env: ConfigEnv) => Promise<\n    | Omit<UserConfig, 'plugins'>\n    | null\n    | void\n  > | Omit<UserConfig, 'plugins'> | null | void);\n\nexport interface LivePreviewOptions {\n  /**\n   * Allow or disable automatic browser reloading on rebuild. The default is\n   * true.\n   */\n  readonly reload?: boolean;\n  /**\n   * Configuration that should only be applied to live preview builds. This is\n   * deeply merged into your regular Vite configuration.\n   */\n  readonly config?: LivePreviewConfig;\n  /**\n   * Plugins that should only be applied to the preview server.\n   */\n  readonly plugins?: PluginOption[];\n}\n\n/**\n * Start a preview server if the build mode is `preview` or `preview:<mode>`.\n *\n * **NOTE:** This plugin forces `build.watch` when enabled, so the Vite build\n * `--watch` option is optional/implied.\n */\nexport default ({ reload = true, config, plugins }: LivePreviewOptions = {}): Plugin => {\n  let enabled = false;\n\n  // resolved config\n  let logger = createLogger('silent');\n  let clearScreen = false;\n  let mode = 'preview';\n  let configFile: string | undefined;\n  let inlineConfig: InlineConfig = {};\n\n  // runtime state\n  let server: PreviewServer | undefined;\n  let error: Error | undefined;\n  let deferToBuild: DeferredPromise<void> | undefined;\n  let reloadDelay: NodeJS.Timeout | undefined;\n  let deferToRequests: DeferredPromise<void> | undefined;\n  let deferToRequestsDelay: NodeJS.Timeout | undefined;\n  let activeRequestCount = 0;\n\n  const debug = createDebugger('live-preview');\n  const sockets = new Set<WebSocket>();\n\n  const plugin: Plugin = {\n    name: 'live-preview-build',\n    config(partialConfig, env) {\n      // Disabled for non-build commands (ie. serve).\n      if (env.command !== 'build') return;\n      // Disabled if not a preview mode.\n      if (!env.mode.startsWith('preview')) return;\n\n      enabled = true;\n\n      // Apply the live preview only build configuration.\n      return typeof config === 'function'\n        ? config(partialConfig, env)\n        : config;\n    },\n    configResolved(resolvedConfig) {\n      if (!enabled) return;\n\n      // Disable if the last plugin with this plugin's name is not this\n      // instance of the plugin. The override configuration has already been\n      // applied, and that's fine. But, we only want one preview server, so all\n      // subsequent hooks should be no-ops.\n      if (Array.from(resolvedConfig.plugins).reverse().find((p) => p.name === plugin.name) !== plugin) {\n        enabled = false;\n        return;\n      }\n\n      debug?.('enabled.');\n\n      // Save the resolved config for later use.\n      logger = resolvedConfig.logger;\n      clearScreen = resolvedConfig.clearScreen !== false;\n      mode = resolvedConfig.mode;\n      configFile = resolvedConfig.configFile;\n      inlineConfig = {\n        ...resolvedConfig.inlineConfig,\n        // XXX: Inline (JavaScript API) plugins are unsafe to reuse in the\n        // preview command. This is a current limitation of Vite.\n        plugins: undefined,\n      };\n\n      // Live preview implies watching.\n      //\n      // XXX: Technically, the resolved config should be immutable (final),\n      // but it can be modified, and at least one official plugin does this\n      // (@vitejs/plugin-basic-ssl).\n      resolvedConfig.build.watch ??= {};\n    },\n    async buildStart() {\n      if (!enabled) return;\n\n      clearTimeout(reloadDelay);\n\n      // Delay the build if requests are in progress.\n      await deferToRequests?.promise;\n\n      if (!deferToBuild) {\n        deferToBuild = defer();\n        debug?.('requests paused.');\n        void deferToBuild.promise.then(() => debug?.('requests resumed.'));\n      }\n\n      if (clearScreen) {\n        // XXX: Vite's build watch mode doesn't clear the screen before builds.\n        // This seems like a bug?\n        logger.clearScreen('error');\n      }\n    },\n    buildEnd(buildError) {\n      if (!enabled) return;\n\n      // Save build errors to be displayed by the preview server.\n      error = buildError;\n    },\n    async closeBundle() {\n      if (!enabled) return;\n\n      const buildPromise = deferToBuild?.promise;\n\n      deferToBuild?.resolve();\n      deferToBuild = undefined;\n\n      // Continue after any other async tasks which were awaiting the promise.\n      await buildPromise;\n\n      // Signal the preview server to reload.\n      if (server) {\n        if (reload) {\n          server.config.logger.info(chalk.green('page-reload'), { timestamp: true });\n        }\n\n        if (clearScreen) {\n          server.config.logger.info(chalk.green('preview server ready'), { timestamp: true });\n          console.log();\n          server.printUrls();\n        }\n\n        if (reload) {\n          clearTimeout(reloadDelay);\n          reloadDelay = setTimeout(() => {\n            debug?.(`sending page-reload to ${sockets.size} clients...`);\n            sockets.forEach((socket) => {\n              socket.send(JSON.stringify({ type: 'page-reload' }));\n              debug?.(`sent page-reload.`);\n            });\n          }, 1000).unref();\n        }\n\n        return;\n      }\n\n      const onConnect = (socket: WebSocket): void => {\n        sockets.add(socket);\n        socket.on('close', () => sockets.delete(socket));\n      };\n\n      const onRequest = (): (() => void) => {\n        clearTimeout(deferToRequestsDelay);\n        activeRequestCount++;\n\n        if (!deferToRequests) {\n          deferToRequests = defer();\n          debug?.('building paused.');\n          void deferToRequests.promise.then(() => debug?.('building resumed.'));\n        }\n\n        return () => {\n          activeRequestCount = Math.max(0, activeRequestCount - 1);\n\n          if (activeRequestCount === 0) {\n            // Wait a short time to see if any new requests come in,\n            // before resolving the request promise.\n            clearTimeout(deferToRequestsDelay);\n            deferToRequestsDelay = setTimeout(() => {\n              deferToRequests?.resolve();\n              deferToRequests = undefined;\n            }, 500).unref();\n          }\n        };\n      };\n\n      const getError = (): Error | undefined => {\n        return error;\n      };\n\n      const getBuildPromise = async (): Promise<void> => {\n        await deferToBuild?.promise;\n      };\n\n      // Preload the preview config instead of letting the `preview()` function\n      // load it. This is necessary so that the live preview plugin can be\n      // injected as the first plugin.\n      let previewConfig: InlineConfig = configFile\n        ? await loadConfigFromFile(\n          { command: 'serve', mode, isPreview: true, isSsrBuild: false },\n          configFile,\n          inlineConfig.root,\n          inlineConfig.logLevel,\n        ).then((result) => result?.config ?? {})\n        : {};\n\n      // Merge the inline config back into the loaded preview config, because\n      // that's what `preview()` would do if it were allowed to load the config\n      // file (disallowed below). You can think of the inline config as similar\n      // to command line options, which override file config options. This is\n      // in fact how the Vite CLI uses the JavaScript API's inline config.\n      previewConfig = mergeConfig(previewConfig, inlineConfig);\n\n      // The config file has already been loaded, so don't let the `preview()`\n      // function load it again.\n      previewConfig.configFile = false;\n\n      // The preview command is not allowed to clear the screen. The build\n      // command should do it if necessary.\n      previewConfig.clearScreen = false;\n\n      // Force the live preview plugin to be the first plugin so that it can\n      // add connect middleware to the preview server first.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      previewConfig.plugins = [\n        pluginServe({ onConnect, onRequest, getError, getBuildPromise }),\n        ...(previewConfig.plugins ?? []),\n        ...(plugins ?? []),\n      ];\n\n      server = await preview(previewConfig);\n      server.config.logger.info(chalk.green('preview server started'), { timestamp: true });\n      console.log();\n      server.printUrls();\n    },\n  };\n\n  return plugin;\n};\n"],"names":[],"mappings":"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"}