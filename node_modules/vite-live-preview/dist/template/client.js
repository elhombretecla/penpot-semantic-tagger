const TEMPLATE_CLIENT_SCRIPT = "console.log('[vite] connecting...');\n\n// XXX: The following line must stay exactly as-is so that the real base can be\n// injected at runtime.\nconst base = '/';\nconst pingUrl = window.location.protocol + '//' + window.location.host + base;\nconst socketUrl = (window.location.protocol === 'https:' ? 'wss:' : 'ws:') + '//' + window.location.host + base;\nconst socket = new WebSocket(socketUrl);\n\nsocket.addEventListener('open', () => {\n  console.log('[vite] connected.');\n});\n\nsocket.addEventListener('message', (event) => {\n  try {\n    const message = JSON.parse(event.data);\n\n    if (message?.type === 'page-reload') {\n      // Echo the message back so the server for debugging purposes.\n      socket.send(JSON.stringify({ type: 'page-reload' }));\n      window.location.reload();\n    }\n  }\n  catch {\n    // ignore invalid messages\n  }\n});\n\nsocket.addEventListener('close', (event) => {\n  if (!event.wasClean) {\n    // Only print this message when the server is down, not when a page\n    // navigation occurs. Server down should be a non-clean close, and page\n    // navigation should be clean cose.\n    console.log('[vite] server connection lost. polling for restart...');\n  }\n\n  ping().then(() => {\n    // Reload the page when the server is back up to get the latest changes.\n    window.location.reload();\n  });\n});\n\n/**\n * Make repeating ping requests to the preview server to check if it is up,\n * with a delay between requests.\n */\nasync function ping() {\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n\n    try {\n      // Fetch should reject a networking error if the server is down.\n      await fetch(pingUrl, {\n        mode: 'no-cors',\n        headers: {\n          // Custom headers won't be included in a request with no-cors so\n          // (ab)use one of the safe-listed headers to identify the ping request.\n          Accept: 'text/x-vite-ping',\n        },\n      });\n\n      return;\n    }\n    catch {\n      // ping failed\n    }\n  }\n};\n";

export { TEMPLATE_CLIENT_SCRIPT as default };
//# sourceMappingURL=client.js.map
