{"version":3,"file":"bin.js","sources":["../src/bin.ts"],"sourcesContent":["import { createCommand, InvalidArgumentError } from '@commander-js/extra-typings';\nimport type { LogLevel } from 'vite';\n\nimport { description, version } from './bin.data.js';\n\nconst cli = createCommand('vite-live-preview')\n  .description(description)\n  .allowUnknownOption(false)\n  .allowExcessArguments(false)\n  .argument('[root]', 'specify root directory')\n  .option('--host [host]', '[string] specify hostname')\n  .option('--port <port>', '[number] specify port', parsePortArg)\n  .option('--strictPort', '[boolean] exit if specified port is already in use')\n  .option('--open [path]', '[boolean | string] open browser on startup')\n  .option('--reload [boolean]', '[boolean] allow/disable automatic browser reload on rebuild', parseBooleanArg)\n  .option('--outDir <dir>', '[string] output directory (default: dist)')\n  .option('-c, --config <file>', '[string] use specified config file')\n  .option('--base <path>', '[string] public base path (default: /)')\n  .option('-l, --logLevel <level>', '[string] info | warn | error | silent', parseLogLevelArg)\n  .option('--clearScreen [boolean]', '[boolean] allow/disable clear screen when logging', parseBooleanArg)\n  .option('-d, --debug [feat]', '[string | boolean] show debug logs')\n  .option('-f, --filter <filter>', '[string] filter debug logs')\n  .option('-m, --mode <mode>', '[string] specify env mode', parseModeArg)\n  .version(version, '-v, --version', 'Output the current version')\n  .helpOption('-h, --help', 'Display this message')\n  .parse();\n\nconst [root] = cli.processedArgs;\nconst { debug, filter, ...options } = cli.opts();\n\nif (debug) {\n  const debugValue = typeof debug === 'string'\n    ? debug.split(',').map((v) => `vite:${v}`).join(',')\n    : 'vite:*';\n\n  process.env.DEBUG = `${process.env.DEBUG ? process.env.DEBUG + ',' : ''}${debugValue}`;\n}\n\nif (filter) {\n  process.env.VITE_DEBUG_FILTER = filter;\n}\n\n// XXX: Lazy load the main function so that environment variables which are\n// greedily evaluated can take effect.\nconst { main } = await import('./main.js');\n\nawait main({ root, ...options });\n\nfunction parsePortArg(value: string): number {\n  const int = Number.parseInt(value, 10);\n\n  if (Number.isInteger(int) || int < 0 || int > 65_535) {\n    return int;\n  }\n\n  throw new InvalidArgumentError('invalid port number');\n}\n\nfunction parseLogLevelArg(value: string): LogLevel {\n  if (value === 'info') return 'info';\n  if (value === 'warn') return 'warn';\n  if (value === 'error') return 'error';\n  if (value === 'silent') return 'silent';\n\n  throw new InvalidArgumentError('invalid log level');\n}\n\nfunction parseBooleanArg(value: string): boolean {\n  if (value === 'true') return true;\n  if (value === 'false') return false;\n\n  throw new InvalidArgumentError('invalid clear screen option');\n};\n\nfunction parseModeArg(value: string): `preview${string}` {\n  if (value.startsWith('preview')) return value as `preview${string}`;\n\n  throw new InvalidArgumentError('mode must start with \"preview\"');\n}\n"],"names":[],"mappings":"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"}