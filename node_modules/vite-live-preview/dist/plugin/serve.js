import { WebSocketServer } from 'ws';
import middlewareClient from '../middleware/client.js';
import middlewareDelay from '../middleware/delay.js';
import middlewareError from '../middleware/error.js';
import middlewareInject from '../middleware/inject.js';
import middlewareLifecycle from '../middleware/lifecycle.js';
import middlewareLog from '../middleware/log.js';
import middlewarePing from '../middleware/ping.js';
import { createDebugger } from '../util/create-debugger.js';

const pluginServe = ({ onConnect, onRequest, getError, getBuildPromise }) => {
  const debug = createDebugger("live-preview");
  return {
    name: `live-preview-serve`,
    configurePreviewServer: {
      // Important that this plugin's middleware be injected into the preview
      // server first.
      order: "pre",
      handler({ httpServer, middlewares, config }) {
        const { base } = config;
        const websocketServer = new WebSocketServer({
          // XXX: Could be an HTTP/2 server. Technically, websockets
          // (specifically, the upgrade request) is not supported over HTTP/2.
          // But, the NodeJS HTTP/2 server allows HTTP/1 requests (TLS ALP
          // negotiation), so websockets still work.
          server: httpServer
        });
        websocketServer.on("connection", (socket) => {
          debug?.(`connected.`);
          socket.on("message", (data) => {
            try {
              const text = (Array.isArray(data) ? Buffer.concat(data) : data instanceof Buffer ? data : Buffer.from(data)).toString("utf8");
              const message = JSON.parse(text);
              if (message?.type === "page-reload") {
                debug?.("reloading...");
              }
            } catch {
            }
          });
          socket.on("close", () => {
            debug?.(`disconnected.`);
          });
          onConnect(socket);
        });
        middlewares.use(middlewareLog()).use(middlewarePing()).use(middlewareClient({ base })).use(middlewareDelay({ getPromise: getBuildPromise })).use(middlewareLifecycle({ onRequest })).use(middlewareError({ base, getError })).use(middlewareInject({ base }));
      }
    }
  };
};

export { pluginServe as default };
//# sourceMappingURL=serve.js.map
